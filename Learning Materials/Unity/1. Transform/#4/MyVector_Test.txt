using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 1. 위치벡터
// 2. 거리벡터
// 3. 단위벡터
struct MyVector
{
    public float x;
    public float y;
    public float z;

    public MyVector(float x, float y, float z)
    {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public static MyVector operator +(MyVector a, MyVector b) // 벡터 사이의 덧셈 정의
    {
        return new MyVector(a.x + b.x, a.y + b.y, a.z + b.z);
    }

    public static MyVector operator -(MyVector a, MyVector b) // 벡터 사이의 뺄셈 정의
    {
        return new MyVector(a.x - b.x, a.y - b.y, a.z - b.z);
    }

    public static MyVector operator *(MyVector a, float f) // 벡터와 float 사이의 곱셈 정의
    {
        return new MyVector(a.x * f, a.y * f, a.z * f);
    }

    public float magnitude // 벡터 크기 구하는 프로퍼티
    {
        get
        {
            return Mathf.Sqrt(x * x + y * y + z * z);
        }
    }
    public MyVector normalized // 벡터를 단위벡터로 만들어주는 프로퍼티
    {
        get
        {
            return new MyVector(x / magnitude, y / magnitude, z / magnitude);
        }
    }
}

public class MyVector_Test : MonoBehaviour
{
    [SerializeField] // 변수를 public으로 선언하지 않으면서 Inspector에서 조절이 가능해짐
    float v_speed = 10.0f;

    // Start is called before the first frame update
    void Start()
    {
        MyVector to = new MyVector(10.0f, 0.0f, 0.0f); // 목적지 // 위치벡터
        MyVector from = new MyVector(5.0f, 0.0f, 0.0f); // 출발지 // 위치벡터
        MyVector dir = to - from; // (5.0f, 0.0f, 0.0f) // 목적지 - 출발지 // 거리벡터
        dir = dir.normalized; // (1.0f, 0.0f, 0.0f) // 단위벡터 // 방향만 남음(크기 1)

        MyVector newPos = from + dir * v_speed; // 출발지부터 목적지 방향으로 이동

        // 거리벡터
        // 1. 크기 : 5, magnitude
        // 2. 방향 : 오른쪽, normalized
    }

    // Update is called once per frame
    void Update()
    {

    }
}
