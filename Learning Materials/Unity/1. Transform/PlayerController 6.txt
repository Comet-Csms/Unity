using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [SerializeField] // public을 붙여준 것과 같은 효과
    public float _speed = 10.0f; // Unity상에서 조절이 가능해짐

    // Start is called before the first frame update
    void Start()
    {

    }

    float _yAngle = 0.0f;
    // Update is called once per frame
    void Update()
    {
        _yAngle += Time.deltaTime * 100.0f;

        // 방법 1.
        // 절대 회전값 // _yAngle의 값으로 회전
        //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f);
        //transform.eulerAngles += new Vector3(0.0f, Time.deltaTime * 100.0f, 0.0f); // 바로 위 코드랑 완전히 동일하게 작동함
        //transform.eulerAngles = new Vector3(0.0f, 10.0f, 0.0f); // 단순히 절대각도 10도에 위치함

        // 방법 2.
        // +- delta, 특정 축을 기준으로 얼마만큼 회전하고 싶을 때
        //transform.Rotate(new Vector3(0.0f, Time.deltaTime * 100.0f, 0.0f));
        //transform.Rotate(new Vector3(0.0f, 10.0f, 0.0f)); // 매 프레임 마다 현재 위치에서 10도씩 회전

        // 방법 3. (== 방법 1.)
        //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f));
        //transform.rotation = Quaternion.Euler(new Vector3(0.0f, 10.0f, 0.0f)); // 단순히 절대각도 10도에 위치함

        if (Input.GetKey(KeyCode.W))
        {
            //transform.rotation = Quaternion.LookRotation(Vector3.forward); // World 좌표계로 작동
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(Vector3.forward), 0.2f); // (처음보는 위치, 최종보는 위치, 0~1) // World 좌표계로 작동
            //transform.Translate(Vector3.forward * Time.deltaTime * _speed);
            transform.position += Vector3.forward * Time.deltaTime * _speed;
        }
        if (Input.GetKey(KeyCode.S))
        {
            //transform.rotation = Quaternion.LookRotation(Vector3.back); // World 좌표계로 작동
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(Vector3.back), 0.2f); // (처음보는 위치, 최종보는 위치, 0~1) // World 좌표계로 작동
            //transform.Translate(Vector3.forward * Time.deltaTime * _speed);
            transform.position += Vector3.back * Time.deltaTime * _speed;
        }
        if (Input.GetKey(KeyCode.D))
        {
            //transform.rotation = Quaternion.LookRotation(Vector3.right); // World 좌표계로 작동
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(Vector3.right), 0.2f); // (처음보는 위치, 최종보는 위치, 0~1) // World 좌표계로 작동
            //transform.Translate(Vector3.forward * Time.deltaTime * _speed);
            transform.position += Vector3.right * Time.deltaTime * _speed;
        }
        if (Input.GetKey(KeyCode.A))
        {
            //transform.rotation = Quaternion.LookRotation(Vector3.left); // World 좌표계로 작동
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(Vector3.left), 0.2f); // (처음보는 위치, 최종보는 위치, 0~1) // World 좌표계로 작동
            //transform.Translate(Vector3.forward * Time.deltaTime * _speed);
            transform.position += Vector3.left * Time.deltaTime * _speed;
        }
    }
}
