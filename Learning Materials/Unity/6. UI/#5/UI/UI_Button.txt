using System; // Type 사용하기 위함
using System.Collections;
using System.Collections.Generic;
using TMPro; // TMP_Text 사용하기 위함
using UnityEngine;
using UnityEngine.UI; // Text 사용하기 위함

public class UI_Button : MonoBehaviour
{
    /*[SerializeField]
    TMP_Text _text; // == TextMeshProUGUI _text;*/ // Unity에서 매핑하지 않고, 코드에서 이름으로 찾아 저장할거라 필요 없음

    Dictionary<Type, UnityEngine.Object[]> _objects = new Dictionary<Type, UnityEngine.Object[]>(); // Button Type은 Button의 목록들을 들고 있고, Text Type은 Text의 목록들을 들고 있음

    enum Buttons // Button Object 목록 작성
    {
        PointButton
    }

    enum Texts // Text(TMP_Text) Object 목록 작성
    {
        PointText,
        ScoreText
    }

    // Start is called before the first frame update
    void Start()
    {
        Bind<Button>(typeof(Buttons)); // Button Component(<Button>)를 찾아 해당하는 Object를 매핑해라
        //Bind<Text>(typeof(Texts)); // Text Component(<Text>)를 찾아 해당하는 Object를 매핑해라
        Bind<TMP_Text>(typeof(Texts)); // Text Component(<TMP_Text>)를 찾아 해당하는 Object를 매핑해라
        //Debug.Log($"{typeof(Buttons)}"); // UI_Button+Buttons
        //Debug.Log($"{typeof(Texts)}"); // UI_Button+Texts
    }

    void Bind<T>(Type type) where T : UnityEngine.Object // enum을 통째로 넘겨받으면 목록들이랑 실제 Object랑 매핑해주는 함수 // <T>, Button Component, Text(TMP_Text) Component를 들고있는 Object를 찾기위해 힌트를 주기 위함
    {
        string[] names = Enum.GetNames(type); // type으로 넘겨받은 enum에 속한 enum값들을 string으로 변환해서 배열로 저장
        UnityEngine.Object[] objects = new UnityEngine.Object[names.Length]; // enum값의 개수만큼 UnityEngine.Object의 배열을 만들어줌 // UnityEngine.Object에는 모든 Object들(Text, Button 등)을 저장 가능
        _objects.Add(typeof(T), objects); // Key값에는 Type(Button, Text(TMP_Text) 등)를 넣어주고, Value값에는 objects를 넣어주기 // 여기까지하면 objects는 빈 배열 // Object들을 찾아서 넣어줘야함

        // names에 들어있는 Object의 이름들로 실제 Object를 찾아 연결해주는 과정
        for (int i = 0; i < names.Length; i++) // names에 들어있는 Object들의 이름들의 수만큼 반복
        {
            objects[i] = Util.FindChild<T>(gameObject, names[i], true); // gameObject는 UI_Button Script를 포함하고있는 UI_Button Object를 의미 // Texts - pointText의 경우에는 gameObject의 자식의 자식이기 때문에 재귀는 true여야함
        }
    }

    int _score = 0;

    public void OnButtonClicked() // public으로 작성해야 Unity에서 함수가 뜸
    {
        Debug.Log("ButtonClicked!");

        _score++; // 한번 클릭이 발생할 때마다 1씩 증가
        //_text.text = $"점수 : {_score}점";
    }
}
